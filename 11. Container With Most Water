CODE : 
class Solution:
    def maxArea(self, heights: List[int]) -> int:
        l, r = 0, len(heights) - 1 
        res = 0 


        while l < r:
            area = min(heights[l], heights[r]) * (r - l) 
            res = max(res, area) 
            if heights[l] <= heights[r]:
                l += 1
            else:
                r -= 1 
        return res 

Explanation : 
🧠 Problem Statement: Container With Most Water
You’re given a list heights where each element represents the height of a vertical line on the x-axis.

You need to find two lines such that the container formed between them can hold the maximum amount of water.

🧮 Area Formula:
sql
Copy code
Area = min(height[left], height[right]) × (right - left)
min() because water can only go up to the shorter line

(right - left) is the width (distance between the lines)

✅ Algorithm Used: Two Pointers
This approach is greedy + two pointers. We try to maximize area by:

Starting with the widest container (left = 0, right = end)

Moving the pointer pointing to the shorter line inward — because only that can potentially increase the area.

🔍 Code Explanation
python
Copy code
class Solution:
    def maxArea(self, heights: List[int]) -> int:
Defines a method that takes a list of integers (heights) and returns the maximum area of water that can be trapped between any two lines.

📌 Step 1: Initialize Pointers and Result
python
Copy code
        l, r = 0, len(heights) - 1 
        res = 0 
l is the left pointer (start of the list)

r is the right pointer (end of the list)

res stores the maximum area found so far

🔁 Step 2: Loop Until Pointers Meet
python
Copy code
        while l < r:
As long as the left is before the right, do the following:

📐 Step 3: Calculate Area
python
Copy code
            area = min(heights[l], heights[r]) * (r - l) 
            res = max(res, area)
Compute the area between the current l and r.

Take the minimum height because water is limited by the shorter line.

Update res with the maximum value seen so far.

↔️ Step 4: Move the Shorter Side Inward
python
Copy code
            if heights[l] <= heights[r]:
                l += 1
            else:
                r -= 1 
If the left line is shorter, move l right.

If the right line is shorter, move r left.

This helps explore possibly taller lines and maximize area.

🔚 Step 5: Return Result
python
Copy code
        return res
Once the loop is done, return the maximum area found.

📘 Example
python
Copy code
heights = [1,8,6,2,5,4,8,3,7]
Best container is between heights 8 (index 1) and 7 (index 8):

ini
Copy code
Area = min(8,7) * (8 - 1) = 7 * 7 = 49
So, the function returns 49.

⏱️ Time and Space Complexity
Time Complexity: O(n) — One pass through the list

Space Complexity: O(1) — No extra space used
